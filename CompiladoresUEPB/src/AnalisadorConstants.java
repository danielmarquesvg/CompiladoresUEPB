/* Generated By:JJTree&JavaCC: Do not edit this line. AnalisadorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int EOF_COMMENT = 9;
  /** RegularExpression Id. */
  int MAIS = 10;
  /** RegularExpression Id. */
  int MENOS = 11;
  /** RegularExpression Id. */
  int ASTERISCO = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int MENOR = 14;
  /** RegularExpression Id. */
  int NAO = 15;
  /** RegularExpression Id. */
  int IGUAL = 16;
  /** RegularExpression Id. */
  int ABRE_PARENTESES = 17;
  /** RegularExpression Id. */
  int FECHA_PARENTESES = 18;
  /** RegularExpression Id. */
  int ABRE_COLCHETE = 19;
  /** RegularExpression Id. */
  int FECHA_COLCHETE = 20;
  /** RegularExpression Id. */
  int ABRE_CHAVE = 21;
  /** RegularExpression Id. */
  int FECHA_CHAVE = 22;
  /** RegularExpression Id. */
  int PONTOVIRGULA = 23;
  /** RegularExpression Id. */
  int PONTO = 24;
  /** RegularExpression Id. */
  int VIRGULA = 25;
  /** RegularExpression Id. */
  int CLASS = 26;
  /** RegularExpression Id. */
  int STRING = 27;
  /** RegularExpression Id. */
  int INT = 28;
  /** RegularExpression Id. */
  int BOOLEAN = 29;
  /** RegularExpression Id. */
  int THIS = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int WHILE = 33;
  /** RegularExpression Id. */
  int TRUE = 34;
  /** RegularExpression Id. */
  int FALSE = 35;
  /** RegularExpression Id. */
  int STATIC = 36;
  /** RegularExpression Id. */
  int EXTENDS = 37;
  /** RegularExpression Id. */
  int RETURN = 38;
  /** RegularExpression Id. */
  int PUBLIC = 39;
  /** RegularExpression Id. */
  int VOID = 40;
  /** RegularExpression Id. */
  int MAIN = 41;
  /** RegularExpression Id. */
  int PRINT = 42;
  /** RegularExpression Id. */
  int LENGTH = 43;
  /** RegularExpression Id. */
  int NEW = 44;
  /** RegularExpression Id. */
  int INT_LITERAL = 45;
  /** RegularExpression Id. */
  int IDENTIFIER = 46;
  /** RegularExpression Id. */
  int LETRAS = 47;
  /** RegularExpression Id. */
  int NUMERO = 48;

  /** Lexical state. */
  int WithinComment = 0;
  /** Lexical state. */
  int DEFAULT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"*/\"",
    "<token of kind 2>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "<EOF_COMMENT>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"&&\"",
    "\"<\"",
    "\"!\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\".\"",
    "\",\"",
    "\"class\"",
    "\"String\"",
    "\"int\"",
    "\"boolean\"",
    "\"this\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\"static\"",
    "\"extends\"",
    "\"return\"",
    "\"public\"",
    "\"void\"",
    "\"main\"",
    "\"System.out.println\"",
    "\"length\"",
    "\"new\"",
    "<INT_LITERAL>",
    "<IDENTIFIER>",
    "<LETRAS>",
    "<NUMERO>",
  };

}
